<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DJISDKManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DJISDKManager</TokenIdentifier>
			<Abstract type="html">This class contains methods to register the app, start or stop connection with the product, and use the DJI Bridge app and Remote Logger tools, etc. After the registration, user can access the connected product through DJISDKManager. Then user can start to control the components of the product.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
            
			
			<NodeRef refid="51"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/product</TokenIdentifier>
			<Abstract type="html">Product connected to the mobile device. The product is accessible only after successful registration of the app.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (__kindof DJIBaseProduct *_Nullable)product</Declaration>
			
			<ReturnValue><Abstract type="html">available DJIBaseProduct object. nil if no product is available.</Abstract></ReturnValue>
			<Anchor>//api/name/product</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/registerApp:withDelegate:</TokenIdentifier>
			<Abstract type="html">The first time the app is initialized after installation, the app connects to a DJI Server through the internet to verify the Application Key. Subsequent app starts will use locally cached verification information to register the app.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)registerApp:(NSString *)appKey withDelegate:(id&lt;DJISDKManagerDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>appKey</Name>
					<Abstract type="html">Application key that was provided by DJI after the application was registered.</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">Registration result callback delegate</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerApp:withDelegate:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/setCompletionBlockQueue:</TokenIdentifier>
			<Abstract type="html">Queue in which completion blocks are called. If left unset, completion blocks are called in main queue.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)setCompletionBlockQueue:(dispatch_queue_t)completionBlockQueue</Declaration>
			<Parameters>
				<Parameter>
					<Name>completionBlockQueue</Name>
					<Abstract type="html">dispatch queue.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setCompletionBlockQueue:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/startConnectionToProduct</TokenIdentifier>
			<Abstract type="html">Start a connection to the DJI product. This method should be called after successful registration of the app. sdkManagerProductDidChangeFrom:to: delegate method will be called if the connection succeeded.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (BOOL)startConnectionToProduct</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the connection is started successfully.</Abstract></ReturnValue>
			<Anchor>//api/name/startConnectionToProduct</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/stopConnectionToProduct</TokenIdentifier>
			<Abstract type="html">Disconnect the existing connection to the DJI product</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)stopConnectionToProduct</Declaration>
			
			
			<Anchor>//api/name/stopConnectionToProduct</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/closeConnectionWhenEnterBackground:</TokenIdentifier>
			<Abstract type="html">Set SDK to close the connection automatically when app enters the background and resume connection automatically when the app enters the foreground. Default is YES.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)closeConnectionWhenEnterBackground:(BOOL)isClose</Declaration>
			<Parameters>
				<Parameter>
					<Name>isClose</Name>
					<Abstract type="html">Close connection or not when app enter background.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/closeConnectionWhenEnterBackground:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/getSDKVersion</TokenIdentifier>
			<Abstract type="html">Gets the DJI Mobile SDK Version</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (NSString *)getSDKVersion</Declaration>
			
			<ReturnValue><Abstract type="html">SDK version as a string.</Abstract></ReturnValue>
			<Anchor>//api/name/getSDKVersion</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/enterDebugModeWithDebugId:</TokenIdentifier>
			<Abstract type="html">Enter debug mode with debug id.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)enterDebugModeWithDebugId:(NSString *)debugId</Declaration>
			<Parameters>
				<Parameter>
					<Name>debugId</Name>
					<Abstract type="html">Debug id from the DJI Bridge App</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enterDebugModeWithDebugId:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/enableRemoteLoggingWithDeviceID:logServerURLString:</TokenIdentifier>
			<Abstract type="html">Enter enable remote logging with log server URL.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)enableRemoteLoggingWithDeviceID:(NSString *_Nullable)deviceID logServerURLString:(NSString *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceID</Name>
					<Abstract type="html">Optional device id to uniquely identify logs from an installation.</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">URL of the remote log server</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enableRemoteLoggingWithDeviceID:logServerURLString:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/startSDKDebugServerWithCompletion:</TokenIdentifier>
			<Abstract type="html">Start debug sever.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)startSDKDebugServerWithCompletion:(void ( ^ ) ( NSString *ipaddress ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">block returns the IP address of the sever.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/startSDKDebugServerWithCompletion:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/setDebugServerDelegate:</TokenIdentifier>
			<Abstract type="html">Register the delegate object to get the connection status of the debug server with the Remote controller and the debug client.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)setDebugServerDelegate:(id&lt;DJISDKDebugServerDelegate&gt;)delegate</Declaration>
			
			
			<Anchor>//api/name/setDebugServerDelegate:</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/DJISDKManager/stopSDKDebugServer</TokenIdentifier>
			<Abstract type="html">Stop the debug server and release the service objects used by the server.</Abstract>
			<DeclaredIn>DJISDKManager.h</DeclaredIn>
			
			<Declaration>+ (void)stopSDKDebugServer</Declaration>
			
			
			<Anchor>//api/name/stopSDKDebugServer</Anchor>
            <NodeRef refid="51"/>
		</Token>
		
        
	</File>
</Tokens>